spring.application.name=mmorpg
# ==============================
# Configuração do H2 (In-Memory)
# ==============================
# URL de conexão com o banco H2 em memória.
# "mem:testdb" ? cria um banco em memória chamado "testdb".
spring.datasource.url=${DB_URL}

# Driver JDBC usado para o H2.
spring.datasource.driverClassName=org.h2.Driver

# Usuário padrão do H2 (vem como "sa").
spring.datasource.username=${DB_USER}

# Senha do H2 (vazia por padrão).
spring.datasource.password=${DB_PASSWORD}

# Dialeto do Hibernate para o H2.
# Faz o Hibernate gerar SQL compatível com H2.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# ddl-auto controla como as tabelas são criadas/atualizadas:
# - create: recria tabelas a cada start (perde dados)
# - update: atualiza sem perder dados (bom para dev)
# - none: não mexe na estrutura
spring.jpa.hibernate.ddl-auto=update

# Mostrar no console as queries SQL que o Hibernate está rodando.
spring.jpa.show-sql=true

# ==============================
# Console Web do H2
# ==============================

# Habilita a interface web do H2 (http://localhost:8080/h2-console)
spring.h2.console.enabled=true

# Caminho para acessar o console (por padrão seria /h2-console).
spring.h2.console.path=/h2-console
